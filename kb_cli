#!/usr/bin/env python
"""Script to generate keyboard plates and cases from KLE data.

By default this reads the data on stdin. You can also use --file to pass data
in through a file.
"""
import argparse
import logging
import sys

sys.path.append('src')
from time import time
from kb_builder.builder import KeyboardCase, load_layout


# Parse our command line args
parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='File containing the KLE data')
parser.add_argument('-n', '--name', help='Output file basename (Default: generate a hash or use -f)')
parser.add_argument('-v', '--verbose', action='store_true', help='Verbose log output')
parser.add_argument('-vv', action='store_true', help='Really verbose log output')
parser.add_argument('-vvv', action='store_true', help='Ludicrisly verbose log output')
parser.add_argument('--switch', help='Switch type: mx, (*)alpsmx, mx-open, mx-open-rotatable, alps')
parser.add_argument('--stab', help='Stabilizer type: cherry, costar, (*)cherry-costar, alps, matias')
parser.add_argument('--layer', default=[], action='append', help='A layer to draw. Must be specified at least once.')
parser.add_argument('--case', help='Case type: (*)none, poker, sandwich')
parser.add_argument('--case-holes', type=int, help='Number of screw holes in the case (Default: 0)')
parser.add_argument('--hole-radius', type=float, help='Case screw hole radius in mm (Default: 2)')
parser.add_argument('--foot-hole', default=[], action='append', help="The X,Y location for a foot's screw-hole")
parser.add_argument('--foot-count', type=int, help='Number of feet to include in the open/closed layers (Default: 1 per foot hole)')
parser.add_argument('--usb-offset', type=float, help='Offset from center for USB connector')
parser.add_argument('--usb-inner-width', type=float, help='Width for the USB connector cutout closest to the PCB (Default: 0)')
parser.add_argument('--usb-outer-width', type=float, help='Width for the USB connector cutout furthest from the PCB (Default: 0)')
parser.add_argument('--usb-height', type=float, help='How far down the bottom plate to cut to allow for the USB connector')
parser.add_argument('--usb-layer', default=[], action='append', help='Add the USB cutout to a layer')
parser.add_argument('--reinforcing', default=False, action='store_true', help='Add the reinforcing plate to a non-case layout')
parser.add_argument('--height', type=float, help='Amount to pad the height (Default: 0)')
parser.add_argument('--width', type=float, help='Amount to pad the width (Default: 0)')
parser.add_argument('--hole', default=[], action='append', help='Add a hole at Layer,X,Y,Diameter')
parser.add_argument('--pcb-height', default=0, type=float, help='Amount to pad the height of the cutout to accommodate a pcb (Default: 0)')
parser.add_argument('--pcb-width', default=0, type=float, help='Amount to pad the width of the cutout to accommodate a pcb (Default: 0)')
parser.add_argument('--corners', default=0, type=float, help='Radius for corners, 0 to disable (Default: 0)')
parser.add_argument('--corner-type', type=str, help='What kind of corners to make (*round, bevel)')
parser.add_argument('--thickness', default=0, type=float, help='Plate thickness, 0 to disable (Default: 0)')
parser.add_argument('--kerf', default=0, type=float, help='Kerf, 0 to disable (Default: 0)')
parser.add_argument('--add-format', default=['dxf'], action='append', help='Add a format to be exported (brp, stp, stl)')
parser.add_argument('--output-dir', type=str, default='static/exports', help='What directory to output files to (Default: static/exports)')
parser.add_argument('--oversize', default=[], action='append', help='Make a layer larger than the other layers')
parser.add_argument('--oversize-distance', type=int, default=4, help='How much larger an oversized layer is')
parser.add_argument('--only', type=str, help='Only generate a single layer. Useful for testing.')
args = parser.parse_args()

# Setup logging
if args.vvv:
    logging.basicConfig(level=1)
if args.vv:
    logging.basicConfig(level=9)
elif args.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

# Make sure the corners are specified correctly
if args.corner_type and args.corner_type not in ('round', 'bevel'):
    logging.error('Incorrect corner type: %s', args.corner_type)
    exit(1)

# Figure out what kind of switch it is
if args.switch:
    if args.switch not in ('mx', 'alpsmx', 'mx-open', 'mx-open-rotatable', 'alps'):
        logging.error('Unknown switch type: %s', args.switch)
        exit(1)

# Figure out what kind of stab it is
if args.stab:
    if args.stab not in ('cherry', 'costar', 'cherry-costar', 'matias', 'alps'):
        logging.error('Unknown stab type: %s', args.stab)
        exit(1)

# Figure out what kind of case it is
if args.case:
    if args.case == 'none':
        args.case = ''
    elif args.case not in ('poker', 'sandwich'):
        logging.error('Unknown case type: %s', args.case)
        exit(1)

# Figure out how many feet to include
if args.foot_hole and not args.foot_count:
    args.foot_count = len(args.foot_hole)

for i, foot in enumerate(args.foot_hole):
    args.foot_hole[i] = map(float, foot.split(','))

# MAIN
if __name__ == '__main__':
    if args.file:
        layout = open(args.file).read()
    else:
        if sys.stdin.isatty():
            print('*** Paste the KLE data here and press Ctrl-D to process it:')
        layout = sys.stdin.read()

    layout = load_layout(layout)

    if not isinstance(layout[0], dict):
        logging.debug("Keyboard property dictionary not found. Adding one.")
        layout.insert(0, {})

    if args.switch:
        logging.debug('Setting the keyboard switch to %s', args.switch)
        layout[0]['switch'] = args.switch
    elif 'switch' not in layout[0]:
        logging.debug('Setting the keyboard switch to the default: mx')
        layout[0]['switch'] = 'mx'

    if args.stab:
        logging.debug('Setting the keyboard stabilizer to %s', args.stab)
        layout[0]['stabilizer'] = args.stab
    elif 'stabilizer' not in layout[0]:
        logging.debug('Setting the keyboard stabilizer to the default: cherry')
        layout[0]['stabilizer'] = 'cherry'

    if args.width or args.height:
        logging.debug('Setting the keyboard padding: %s,%s', args.width, args.height)
        layout[0]['padding'] = (args.width, args.height)

    if args.pcb_width or args.pcb_height:
        logging.debug('Setting the keyboard pcb-padding: %s,%s', args.pcb_width, args.pcb_height)
        layout[0]['padding'] = (args.pcb_width, args.pcb_height)

    if args.corners:
        logging.debug('Setting the corner radius: %s', args.corners)
        layout[0]['corner_radius'] = args.corners

    if args.corner_type:
        logging.debug('Setting the corner type to %s', args.corner_type)
        layout[0]['corner_type'] = args.corner_type
    elif 'corner_type' not in layout[0]:
        logging.debug('Setting the corner type to the default: round')
        layout[0]['corner_type'] = 'round'

    if args.kerf:
        logging.debug('Setting kerf to %s', args.kerf)
        layout[0]['kerf'] = args.kerf

    if args.name:
        logging.debug('Setting name to %s', args.name)
        layout[0]['name'] = args.name

    if 'case' in layout[0]:
        if args.case:
            logging.debug('Setting case type to %s', args.case)
            layout[0]['case']['type'] = args.case
        if args.case_holes:
            logging.debug('Setting case holes to %s', args.case_holes)
            layout[0]['case']['screw_count'] = args.case_holes
        if args.hole_radius:
            logging.debug('Setting case screw size to %s', args.hole_radius)
            layout[0]['case']['screw_size'] = args.hole_radius
    else:
        if args.case:
            layout[0]['case'] = {
                'type': args.case,
                'screw_count': args.case_holes or 4,
                'screw_size': args.hole_radius or 2
            }
            logging.debug('Setting up the case parameters: %s', layout[0]['case'])

    if 'usb' in layout[0]:
        if args.usb_inner_width:
            logging.debug('Setting USB inner width to %s', args.usb_inner_width)
            layout[0]['usb']['inner_width'] = args.usb_inner_width
        if args.usb_outer_width:
            logging.debug('Setting USB outer width to %s', args.usb_outer_width)
            layout[0]['usb']['outer_width'] = args.usb_outer_width
        if args.usb_height:
            logging.debug('Setting USB height to %s', args.usb_height)
            layout[0]['usb']['height'] = args.usb_height
        if args.usb_offset:
            logging.debug('Setting USB offset to %s', args.usb_offset)
            layout[0]['usb']['offset'] = args.usb_offset
    else:
        layout[0]['usb'] = {
            'inner_width': args.usb_inner_width or 10,
            'outer_width': args.usb_outer_width or 15,
            'height': args.usb_height or 6,
            'offset': args.usb_offset or 10
        }
        logging.debug('Setting up the USB parameters: %s', layout[0]['usb'])

    if 'layers' not in layout[0]:
        logging.debug('Initializing layers list.')
        layout[0]['layers'] = {}

    for layer in args.layer:
        if layer not in layout[0]['layers']:
            logging.debug('Adding layer %s', layer)
            layout[0]['layers'][layer] = {}

        if layer in args.usb_layer:
            logging.debug('Setting include_usb_cutout=True for layer %s', layer)
            layout[0]['layers'][layer]['include_usb_cutout'] = True

        if layer in args.oversize:
            logging.debug('Setting oversize %s for layer %s', args.oversize_distance, layer)
            layout[0]['layers'][layer]['oversize'] = args.oversize_distance

    # Add any designated holes
    for hole in args.hole:
        layer, x, y, radius = hole.split(',')  # Make sure it's in the right format
        if layer[0] == '\\':
            layer = layer[1:]
        if 'holes' not in layout[0][layer]:
            layout[0]['layers'][layer]['holes'] = []
        logging.debug('Hole for layer %s with radius %s at %s,%s', layer, radius, x, y)
        layout[0]['layers'][layer]['holes'].append((float(x), float(y), float(radius)))

    # Sanity checks
    if 'layers' not in layout[0] or len(layout[0]['layers']) < 1:
        # FIXME: Print help here
        print("error: argument --layer is required")
        exit(1)

    # Remove layers not in args.only, if specified
    if args.only:
        for layer in layout[0]['layers']:
            if layer != args.only:
                del(layout[0]['layers'][layer])

    # Build the plate
    build_start = time()
    case = KeyboardCase(layout, args.add_format)

    # Create the shape based layers
    layers = (
        # (layer_name, create_function)
        ('simple', case.init_plate),
        ('bottom', case.create_bottom_layer),
        ('middle', case.create_middle_layer)
    )
    for layer, create_layer in layers:
        if layer in case.layers:
            create_layer(layer)
            case.export(layer, args.output_dir)

    # Create the switch based layers
    for layer in ('top', 'switch', 'reinforcing'):
        if layer in case.layers:
            plate = case.create_switch_layer(layer)
            case.export(layer)

    logging.info("Processing took: {0:.2f} seconds".format(time()-build_start))

    # Display info about the plates
    print('*** Overall plate size: %s x %s mm' % (case.width, case.height))
    print('*** PCB cutout size: %s x %s mm' % (case.inside_width, case.inside_height))

    for layer in case.layers:
        print('*** Files exported for plate', layer)
        for file in case.exports[layer]:
            print('*', file['url'][1:])
